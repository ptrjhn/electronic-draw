/*
 * It create modifiers using `theme-colors`
 */
@mixin create-modifiers($component) {
    @each $modifier, $style in $theme-color {
        .uis-#{$component}-#{$modifier} {
            @each $color in $style {
                background-color: $color;
                color: color-yiq($color);
            }
        }
    }
}



/*
 * It create modifiers using `theme-colors` with selectors
 * (hover, active, focus)
 */
@mixin create-modifiers-with-selectors($type, $component) {
    @if ($type == 'background') {
        @each $modifier, $style in $theme-color {
            @each $color in $style {

                @if ($modifier != 'default') {
                    .uis-#{$component}-#{$modifier} {
                        background-color: $color;
                        color: color-yiq($color);
                        border: 1px solid $color;
                    }
                }

                @else {
                    .uis-#{$component}-#{$modifier} {
                        background-color: $color;
                        color: color-yiq($color);
                        border: 1px solid darken($color, 15%);
                    }
                }



                /* Hover + Focus */
                .uis-#{$component}-#{$modifier}:hover,
                .uis-#{$component}-#{$modifier}:focus {
                    background-color: darken($color, 5%);
                    color: color-yiq($color);
                    border: 1px solid darken($color, 5%);
                }

                /* Onclick + Active */
                .uis-#{$component}-#{$modifier}:active,
                .uis-#{$component}-#{$modifier}.uis-active {
                    background-color: darken($color, 10%);
                    color: color-yiq($color);
                    border: 1px solid darken($color, 10%);
                }
            }
        }
    }

    @else if ($type == 'text') {
        @each $modifier, $style in $theme-color {
            @each $color in $style {
                /*
                 *#{$modifier}
                 */
                .uis-#{$component}-text-#{$modifier} {
                    color: $color;
                }

                /* Hover + Focus */
                .uis-#{$component}-text-#{$modifier}:hover,
                .uis-#{$component}-text-#{$modifier}:focus {
                    color: darken($color, 5%);
                }

                /* Onclick + Active */
                .uis-#{$component}-text-#{$modifier}:active,
                .uis-#{$component}-text-#{$modifier}.uis-active {
                    color: darken($color, 10%);
                }
            }
        }
    }
}


/*
 * It create text color modifiers using `text-colors`
 */
@mixin create-text-modifiers($component) {
    @each $modifier, $style in $text-color {
        .uis-#{$component}-#{$modifier} {
            @each $color in $style {
                color: $color !important;
            }
        }
    }
}



/*
 * It create Outline modifiers using `theme-colors` with selectors
 * (hover, active, focus)
 */
@mixin create-outline-modifiers-with-selectors($component) {
    @each $modifier, $style in $theme-color {
        @each $color in $style {

            @if ($modifier == 'default') {
                .uis-#{$component}-outline-#{$modifier} {
                    background-color: transparent;
                    border: 1px solid darken($color, 15%);
                    color: color-yiq($color);
                }
            }

            @else {
                .uis-#{$component}-outline-#{$modifier} {
                    background-color: transparent;
                    border: 1px solid $color;
                    color: $color;
                }
            }

            /* Hover + Focus */
            .uis-#{$component}-outline-#{$modifier}:hover,
            .uis-#{$component}-outline-#{$modifier}:focus {
                background-color: darken($color, 5%);
                border: 1px solid $color;
                color: color-yiq($color);
            }

            /* Onclick + Active */
            .uis-#{$component}-outline-#{$modifier}:active,
            .uis-#{$component}-outline-#{$modifier}.uis-active {
                background-color: darken($color, 10%);
                border: 1px solid $color;
                color: color-yiq($color);
            }
        }
    }
}



/*
 * Mediq Queries
 * for responsive design.
 */
@mixin respond-to($value) {
    @if map-has-key($breakpoint, $value) {
        $size: map-get($breakpoint, $value);

        @media screen and (min-width: $size) {
            @content;
        }
    }

    @else {
        @warn 'Unknown `#{$value}` in $breakpoint';
    }
}


/*
 * Mediq Queries Portrait
 * for responsive design.
 */

@mixin respond-to-max($value) {
    @if map-has-key($breakpoint-max, $value) {
        $size: map-get($breakpoint-max, $value);

        @media screen and (max-width: $size) {
            @content;
        }
    }

    @else {
        @warn 'Unknown `#{$value}` in $breakpoint-max';
    }
}



/*
 * Clearfix
 * To allow a container wraps it's floated and absolute children.
 */

@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}


/*
 * create equal widths with breakpoints
 */
@mixin create-child-width-with-breakpoints {
    // 1. Reset the `min-width` which is set to auyto by default, because
    // flex items won't shrink below their minimum intrinsic content size
    // Using 1px` instead of `0`, so items still wrap into the next line.
    // if they have zero width and padding and the predecessor is 100% wide.
    $childwidth: (
        uis-child-width: (
            box-sizing: border-box,
            width: 100%
        ),
        uis-child-width-1-1: (
            width: 100%
        ),
        uis-child-width-1-2: (
            width: 50%
        ),
        uis-child-width-1-3: (
            width: unquote('calc(100% * 1 / 3.001)')
        ),
        uis-child-width-1-4: (
            width: 25%
        ),
        uis-child-width-1-5: (
            width: 20%
        ),
        uis-child-width-1-6: (
            width: unquote('calc(100% * 1 / 6.001)')
        ),
        uis-child-width-auto: (
            width: auto
        ),
        uis-child-width-expand: (
            flex: 1,
            /* 1 */
            min-width: 1px
        )
    );

    // create child widths
    @each $classname, $style in $childwidth {
        @if ($classname == 'uis-child-width') {
            [class*='#{$classname}'] > * {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($classname == 'uis-child-width-expand') {
            .#{$classname} > :not([class*='uis-width']) {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else {
            @if ($classname != 'uis-child-width-1-1') {
                .#{$classname} > * {
                    @each $property, $value in $style {
                        #{$property}: #{$value};
                    }
                }
            }
        }
    }

    // create breakpoins of child widths
    @each $size, $value in $breakpoint {
        @include respond-to($size) {
            @each $classname, $style in $childwidth {
                @include generate-child-width($size, $classname, $style);
            }
        }
    }
}

@mixin generate-child-width($size, $classname, $style) {
    $condition: if($classname == 'uis-child-width-expand', ':not([class*='uis-width'])', '*');

    @if ($classname != 'uis-child-width') {
        @if ($size == 'small') {
            .#{$classname + '\\@s'} > #{$condition} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'medium') {
            .#{$classname + '\\@m'} > #{$condition} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'large') {
            .#{$classname + '\\@l'} > #{$condition} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'xlarge') {
            .#{$classname + '\\@xl'} > #{$condition} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else {
            @warn 'Error';
        }
    }
}



/*
 * Create a single width with breakpoints
 */

@mixin create-width-with-breakpoints {
    //
    // 1. `max-width` is needed for the pixel-based classes
    //
    $width:(
        uis-width:(
            box-sizing: border-box,
            width: 100%,
            /* 1 */
            max-width: 100%
        ),
        uis-width-1-1:(
            width: 100%
        ),
        // Halves
        uis-width-1-2:(
            width: 50%
        ),
        // Thirds
        uis-width-1-3:(
            width: unquote('calc(100% * 1 / 3.001)')
        ),
        uis-width-2-3:(
            width: unquote('calc(100% * 2 / 3.001)')
        ),
        // Quarters
        uis-width-1-4:(
            width: 25%
        ),
        uis-width-3-4:(
            width: 75%
        ),
        // Fifths
        uis-width-1-5:(
            width: 20%
        ),
        uis-width-2-5:(
            width: 40%
        ),
        uis-width-3-5:(
            width: 60%
        ),
        uis-width-4-5:(
            width: 80%
        ),
        // Sixths
        uis-width-1-6:(
            width: unquote('calc(100% * 1 / 6.001)')
        ),
        uis-width-5-6:(
            width: unquote('calc(100% * 5 / 6.001)')
        ),
        // Auto
        uis-width-auto:(
            width: auto
        ),
        //Expand
        uis-width-expand:(
            flex: 1,
            min-width: 1px
        )
    );

    // create single widths
    @each $classname, $style in $width {
        $condition: if($classname == 'uis-width', '[class*='#{$classname}']', '.#{$classname}');

        #{$condition} {
            @each $property, $value in $style {
                #{$property}: #{$value};
            }
        }
    }

    // create breakpoints of single widths
    @each $size, $value in $breakpoint {
        @include respond-to($size) {
            @each $classname, $style in $width {
                @include generate-width($size, $classname, $style);
            }
        }
    }
}

@mixin generate-width($size, $classname, $style) {
    @if ($classname != 'uis-width') {
        @if ($size == 'small') {
            .#{$classname + '\\@s'} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'medium') {
            .#{$classname + '\\@m'} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'large') {
            .#{$classname + '\\@l'} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else if ($size == 'xlarge') {
            .#{$classname + '\\@xl'} {
                @each $property, $value in $style {
                    #{$property}: #{$value};
                }
            }
        }

        @else {
            @warn 'error';
        }
    }
}

/* Create pixel based widths */
@mixin create-width-pixel-based {
    $pixel-width:(
        small:      150px,
        medium:     300px,
        large:      450px,
        xlarge:     600px,
        xxlarge:    750px
    );

    @each $property, $value in $pixel-width {
        .uis-width-#{$property} {
            width: #{$value};
        }
    }
}



/*
 * Create column width modifiers
 */

@mixin create-column-width-modifiers {
    $column: (
        uis-column-1-2:     2,
        uis-column-1-3:     3,
        uis-column-1-4:     4,
        uis-column-1-5:     5,
        uis-column-1-6:     6
    );

    // create column width modifiers
    @each $classname, $count in $column {
        .#{$classname} {
            column-count: $count;
        }
    }

    // create column width modifiers breakpoints
    @each $size, $value in $breakpoint {
        @include respond-to($size) {
            @each $classname, $count in $column {
                @include generate-column($size, $classname, $count);
            }
        }
    }
}

@mixin generate-column($size, $classname, $count) {
    @if ($size == 'small') {
        .#{$classname + '\\@s'} {
            column-count: $count;
        }
    }

    @else if ($size == 'medium') {
        .#{$classname + '\\@m'} {
            column-count: $count;
        }
    }

    @else if ($size == 'large') {
        .#{$classname + '\\@l'} {
            column-count: $count;
        }
    }

    @else if ($size == 'xlarge') {
        .#{$classname + '\\@xl'} {
            column-count: $count;
        }
    }

    @else {
        @warn 'Error at generate column';
    }
}



/*
 * Create flex alignment utilities
 */
@mixin create-flex-alignment {
    $flex-alignment: (
        uis-flex-left:          flex-start,
        uis-flex-center:        center,
        uis-flex-right:         flex-end,
        uis-flex-between:       space-between,
        uis-flex-around:        space-around
    );

    // create default alignments
    @each $classname, $value in $flex-alignment {
        .#{$classname} {
            justify-content: $value;
        }
    }

    // create alignments breakponts
    @each $size, $value in $breakpoint {
        @include respond-to($size) {
            @each $classname, $value in $flex-alignment {
                @include generate-flex-alignment($size, $classname, $value);
            }
        }
    }
}

@mixin generate-flex-alignment($size, $classname, $value) {
    @if ($size == 'small') {
        .#{$classname + '\\@s'} {
            justify-content: $value;
        }
    }

    @else if ($size == 'medium') {
        .#{$classname + '\\@m'} {
            justify-content: $value;
        }
    }

    @else if ($size == 'large') {
        .#{$classname + '\\@l'} {
            justify-content: $value;
        }
    }

    @else if ($size == 'xlarge') {
        .#{$classname + '\\@xl'} {
            justify-content: $value;
        }
    }

    @else {
        @warn 'Error in generate flex alignment';
    }
}
